/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface GamePlayInterface extends utils.Interface {
  functions: {
    "amount()": FunctionFragment;
    "bet(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "play()": FunctionFragment;
    "playerBet(address)": FunctionFragment;
    "stakerAddressList(uint256)": FunctionFragment;
    "tokenXU()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amount"
      | "bet"
      | "owner"
      | "play"
      | "playerBet"
      | "stakerAddressList"
      | "tokenXU"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "amount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "play", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerBet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerAddressList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "tokenXU", values?: undefined): string;

  decodeFunctionResult(functionFragment: "amount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "playerBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakerAddressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenXU", data: BytesLike): Result;

  events: {
    "SMdataBetNumber(uint256)": EventFragment;
    "SMdataWin(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SMdataBetNumber"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SMdataWin"): EventFragment;
}

export interface SMdataBetNumberEventObject {
  betNumber: BigNumber;
}
export type SMdataBetNumberEvent = TypedEvent<
  [BigNumber],
  SMdataBetNumberEventObject
>;

export type SMdataBetNumberEventFilter = TypedEventFilter<SMdataBetNumberEvent>;

export interface SMdataWinEventObject {
  winer: string;
}
export type SMdataWinEvent = TypedEvent<[string], SMdataWinEventObject>;

export type SMdataWinEventFilter = TypedEventFilter<SMdataWinEvent>;

export interface GamePlay extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GamePlayInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amount(overrides?: CallOverrides): Promise<[BigNumber]>;

    bet(
      _amountTokenGuess: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    play(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerBet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountTokenGuess: BigNumber; guess: BigNumber }
    >;

    stakerAddressList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenXU(overrides?: CallOverrides): Promise<[string]>;
  };

  amount(overrides?: CallOverrides): Promise<BigNumber>;

  bet(
    _amountTokenGuess: PromiseOrValue<BigNumberish>,
    _guess: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  play(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerBet(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountTokenGuess: BigNumber; guess: BigNumber }
  >;

  stakerAddressList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenXU(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      _amountTokenGuess: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    play(overrides?: CallOverrides): Promise<void>;

    playerBet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountTokenGuess: BigNumber; guess: BigNumber }
    >;

    stakerAddressList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenXU(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SMdataBetNumber(uint256)"(betNumber?: null): SMdataBetNumberEventFilter;
    SMdataBetNumber(betNumber?: null): SMdataBetNumberEventFilter;

    "SMdataWin(address)"(winer?: null): SMdataWinEventFilter;
    SMdataWin(winer?: null): SMdataWinEventFilter;
  };

  estimateGas: {
    amount(overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      _amountTokenGuess: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerBet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerAddressList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenXU(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bet(
      _amountTokenGuess: PromiseOrValue<BigNumberish>,
      _guess: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerBet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakerAddressList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenXU(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
